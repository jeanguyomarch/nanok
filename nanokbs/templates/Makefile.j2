{#- Makefile.j2
 # This is the basic Makefile template provided by nanok.
 # Inherit from this template to generate a make-based build system.
-#}
###############################################################################
# NanoK Application Makefile
# This file was generated by nanokbs.
###############################################################################

{#- String that contains all the product names -#}
{%- set products = app.products | map(attribute="name") | join(" ") -%}

{#- Converts a source to the path of its associated object file -#}
{% macro to_obj(src) -%}
{{ src | canon }}.o
{%- endmacro %}

{#- Converts a source to the path of its associated dep file -#}
{% macro to_dep(src) -%}
$(DEPS_DIR)/{{ src | canon }}.d
{%- endmacro %}

# Define the 'Q' variable, to conditionnaly display commands executed via make
ifdef V
  ifneq (V,)
   BUILD_VERBOSE := 1
  endif # V != ''
endif # V
ifndef BUILD_VERBOSE
   BUILD_VERBOSE := 0
endif
ifeq ($(BUILD_VERBOSE),1)
   Q :=
else
   Q := @
endif

###############################################################################

# 'O' defines the output build directory
O ?= build
ifeq ($(realpath $(O)),$(realpath .))
   $(error The build directory cannot be the same as the source directory)
endif

# Deps dir
DEPS_DIR := $(O)/.deps

# CROSS_COMPILE defines the gcc cross-build toolchain
CROSS_COMPILE = {{ app.cross_compile }}

# How to invoke the C compiler (C to objects)
CC = $(CROSS_COMPILE)gcc -c

# How to invoke the C linker (objects to elf)
LD = $(CROSS_COMPILE)gcc

# How to invoke the ASM compiler (ASM to objects)
AS = $(CROSS_COMPILE)gcc -c

# How to invoke objcopy
OBJCOPY = $(CROSS_COMPILE)objcopy

# Make macros to display a run command
info-cc =      @echo "  CC        $(1)"
info-as =      @echo "  AS        $(1)"
info-ld =      @echo "  LD        $(1)"
info-objcopy = @echo "  OBJCOPY   $(1)"

# Build directory of NanoK
NANOK_BUILD_DIR := $(O)/nanok

# Top source directory of NanoK
NANOK_DIR := {{ nanok.dir }}

# Objects files required by NanoK
NANOK_OBJS :=
{%- for source in nanok.sources %} \
  $(NANOK_BUILD_DIR)/{{ to_obj(source) }}
{%- endfor %}

###############################################################################

CFLAGS :=
{% block gcc_cflags -%}
CFLAGS +=  -Wall
CFLAGS +=  -Wextra
CFLAGS +=  -Wshadow
CFLAGS +=  -Winit-self
CFLAGS +=  -Wfloat-equal
CFLAGS +=  -Wtrigraphs
CFLAGS +=  -Wconversion
CFLAGS +=  -Wlogical-op
CFLAGS +=  -Wunsafe-loop-optimizations
CFLAGS +=  -Wdouble-promotion
CFLAGS +=  -Wformat=2
CFLAGS +=  -fomit-frame-pointer
CFLAGS +=  -ffreestanding
CFLAGS +=  -nostdlib
CFLAGS +=  -std=gnu11
{% endblock %}

###############################################################################

ASFLAGS :=
{% block gcc_asflags -%}
{% endblock %}

###############################################################################

CPPFLAGS :=
{% block gcc_cppflags %}
CPPFLAGS +=  -I$(NANOK_DIR)/include
CPPFLAGS +=  -I$(NANOK_DIR)/include/{{ app.arch }}
{% endblock %}

###############################################################################

LDFLAGS :=
{% block gcc_ldflags -%}
{% endblock %}

###############################################################################
# Entry Targets
###############################################################################

all: nanok {{ products }}

.PHONY: nanok clean {{ products }}

clean:
	$(RM) -r $(NANOK_BUILD_DIR)
	$(RM) -r $(O)

###############################################################################
# NanoK Objects Compilation
###############################################################################

nanok: $(NANOK_OBJS)

{% macro define_nanok_target(src) -%}
$(NANOK_BUILD_DIR)/{{ to_obj(src) }}: $(NANOK_DIR)/{{ src }} Makefile
{%- endmacro %}
{%- for module in nanok.modules %}
  {#- Compile the C sources #}
  {%- for c_source in module.c_sources %}
{{ define_nanok_target(c_source) }}
	$(call info-cc,$@)
	@mkdir -p $(NANOK_BUILD_DIR)
	$(Q)$(CC) $(CFLAGS) {% if module.third_party %}-w {% endif %}$(CPPFLAGS) $< -o $@
  {% endfor %}
  {#- Compile the ASM sources #}
  {%- for asm_source in module.asm_sources %}
{{ define_nanok_target(asm_source) }}
	$(call info-as,$@)
	@mkdir -p $(NANOK_BUILD_DIR)
	$(Q)$(AS) $(ASFLAGS) $< -o $@
  {% endfor %}
{%- endfor %}

{% macro define_product_target(src) -%}
$(O)/{{ to_obj(src) }}: {{ src }} Makefile
{%- endmacro %}

{% for product in app.products %}
###############################################################################
# Product {{ product.name }}
###############################################################################

{{ product.name }}: $(O)/{{ product.name }}

$(O)/{{ product.name }}: $(NANOK_OBJS)
{%- for source in product.sources %} \
  $(O)/{{ to_obj(source) }}
{%- endfor %}
	$(call info-ld,$@)
{%- block gcc_link scoped %}
	$(Q)$(LD) $(LDFLAGS) -o $@ $^
{%- endblock %}

{% for c_source in product.c_sources %}
{{ define_product_target(c_source) }}
	$(call info-cc,$@)
	@mkdir -p $(O)
	$(Q)$(CC) $(CFLAGS) $(CPPFLAGS) $< -o $@
{% endfor %}

{%- block product_extra scoped %}
{%- endblock %}

{%- endfor %}

###############################################################################
# C Source dependencies
###############################################################################

{%- macro gen_dep(build_dir, source) -%}
  {%- set dep = to_dep(source) %}
{{ dep }}: {{ source }}
	@mkdir -p $(DEPS_DIR)
	@$(CC) -MM $(CPPFLAGS) $< -MF $@ -MT {{ build_dir }}/{{ to_obj(source) }}

-include {{ dep }}
{%- endmacro %}

{%- for source in nanok.c_sources -%}
  {{ gen_dep("$(NANOK_BUILD_DIR)", source) }}
{%- endfor -%}
{%- for product in app.products -%}
  {%- for source in product.c_sources -%} 
    {{ gen_dep("$(O)", source) }}
  {%- endfor -%}
{%- endfor %}

{%- block extra %}{% endblock -%}
